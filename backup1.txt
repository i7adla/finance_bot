import logging
import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–°–£–ú–ú–ê –ö–ê–¢–ï–ì–û–†–ò–Ø –û–ü–ò–°–ê–ù–ò–ï\n(–ü—Ä–∏–º–µ—Ä: 500 –µ–¥–∞ –æ–±–µ–¥)\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π:\n‚Ä¢ /sum ‚Äî —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n‚Ä¢ /category ‚Äî —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n‚Ä¢ /help ‚Äî —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
"‚Ä¢ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
"‚Ä¢ /help ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
"‚Ä¢ /sum ‚Äî –æ–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
"‚Ä¢ /category ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n"
"üìå *–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π:*\n"
"–°–£–ú–ú–ê –ö–ê–¢–ï–ì–û–†–ò–Ø –û–ü–ò–°–ê–ù–ò–ï\n"
"–ü—Ä–∏–º–µ—Ä: `1000 –µ–¥–∞ —É–∂–∏–Ω`\n"
"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã: '–µ–¥–∞', '–ï–¥–∞', '–ï–î–ê' ‚Äî —ç—Ç–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ\\."
    )
    await update.message.reply_text(help_text, parse_mode='MarkdownV2')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        user_id = update.effective_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = update.message.text.split(maxsplit=2)
        if len(data) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –°–£–ú–ú–ê –ö–ê–¢–ï–ì–û–†–ò–Ø –û–ü–ò–°–ê–ù–ò–ï")

        amount, category, description = data

        category = category.strip().lower()

        with open("finance_records.txt", "a", encoding="utf-8") as file:
            file.write(f"{now} | {user_id} | {amount} | {category} | {description}\n")

        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    except Exception as e:
        logging.error(e)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sum
async def sum_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        today = datetime.date.today()
        user_id = update.effective_user.id  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total = 0.0
        found = False

        try:
            with open("finance_records.txt", "r", encoding="utf-8") as file:
                for line in file:
                    if line.startswith(today.strftime("%Y-%m-%d")):
                        parts = line.strip().split(" | ")
                        if len(parts) >= 5:
                            record_user_id = parts[1].strip()
                            amount_str = parts[2].strip()
                            if record_user_id == str(user_id):
                                try:
                                    total += float(amount_str)
                                    found = True
                                except ValueError:
                                    continue
        except FileNotFoundError:
            await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if found:
            await update.message.reply_text(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: **{total:.2f}**")
        else:
            await update.message.reply_text("üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")

    except Exception as e:
        logging.error(e)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å—É–º–º—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /category
async def list_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        categories = set()

        try:
            with open("finance_records.txt", "r", encoding="utf-8") as file:
                for line in file:
                    parts = line.strip().split(" | ")
                    if len(parts) >= 5:
                        record_user_id = parts[1].strip()
                        if record_user_id == str(user_id):
                            category = parts[3].strip().lower()
                            categories.add(category)
        except FileNotFoundError:
            await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if categories:
            sorted_categories = sorted(categories)
            categories_list = "\n‚Ä¢ ".join(sorted_categories)
            await update.message.reply_text(f"üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n‚Ä¢ {categories_list}")
        else:
            await update.message.reply_text("üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    except Exception as e:
        logging.error(e)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == '__main__':
    application = ApplicationBuilder().token('7602986144:AAHyQmZW4rQVmTYqik2YPfI0FdDUO4Hr1WM').build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    start_handler = CommandHandler('start', start)
    help_handler = CommandHandler('help', help_command)
    message_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message)
    sum_handler = CommandHandler('sum', sum_today)
    category_handler = CommandHandler('category', list_categories)

    application.add_handler(start_handler)
    application.add_handler(help_handler)
    application.add_handler(message_handler)
    application.add_handler(sum_handler)
    application.add_handler(category_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()